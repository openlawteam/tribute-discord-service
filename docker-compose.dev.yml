version: "3.7"
services:
  # Postgres
  db:
    image: postgres
    env_file:
      # Committed to source control for convience.
      - .env.dev
      # Adding as well, as we require API key(s) for dev. Not in source control.
      - .env
    # @see https://www.postgresql.org/docs/9.4/pgstatstatements.html
    command: ["postgres", "-cshared_preload_libraries=pg_stat_statements"]
    volumes:
      - "db_vol:/var/lib/postgresql/data"
    ports:
      # Optional: override the `DB_PORT` port in `.env`; defaults to `5432`
      - "${DB_PORT:-5432}:5432"

  # App
  app:
    build:
      context: .
      dockerfile: ./Dockerfile.dev
    env_file:
      # Committed to source control for convience.
      - .env.dev
      # Adding as well, as we require API key(s) for dev. Not in source control.
      - .env
    command:
      # Wait for `db` to be available at port, then run the `dev-start` script
      ["./scripts/wait-for-it.sh", "db:5432", "--", "./scripts/dev-start.sh"]
    ports:
      # Optional: override the `HTTP_API_PORT` port in `.env`; defaults to `3000`
      - "${HTTP_API_PORT:-3000}:3000"
    volumes:
      - ./src:/app/src
      - ./prisma:/app/prisma
    depends_on:
      # Starts the `db` service first.
      # Does not wait for Postgres itself to be ready.
      - db
      - docker-host

  ##
  # This container will forward any traffic to your host machine.
  # For example, this is helpful to access a separate docker container/app
  # running from another `Dockerfile` or `docker-compose.yml`.
  #
  # @see https://github.com/qoomon/docker-host
  # @see https://sam-ngu.medium.com/connecting-to-docker-host-mysql-from-docker-container-linux-ubuntu-766e526542fd
  ##
  docker-host:
    image: qoomon/docker-host
    cap_add:
      - NET_ADMIN
      - NET_RAW
    restart: on-failure

volumes:
  db_vol: {}
